#!/bin/bash
# ------------------------------------------------------------------
if [ $# != 0 ]; then
  echo "Usage: $0"
  exit 1
fi

temp=`pwd`
if [[ $temp == *"KS_nHYP_FA"* ]] ; then
  dir=${temp##*FA/}   # Strip everything up to and including "FA/"
  inpath=/raidc/users/schaich/LSD/KS_nHYP_FA/$dir
  outpath=/raid1/backup/schaich/LSD/KS_nHYP_FA/$dir
elif [[ $temp == *"SU4/4f"* ]] ; then
  dir=${temp##*SU4/4f/}   # Strip everything up to and including "SU4/4f/"
  inpath=/raidc/users/schaich/LSD/SU4/4f/$dir
  outpath=/raid1/backup/schaich/LSD/SU4/$dir
elif [[ $temp == *"SU4/0f"* ]] ; then
  dir=${temp##*SU4/0f/}   # Strip everything up to and including "SU4/0f/"
  inpath=/raidc/users/schaich/LSD/SU4/0f/$dir
  outpath=/raid1/backup/schaich/LSD/SU4quenched/$dir
else
  echo "ERROR: Unrecognized path $temp"
  exit 1
fi
# ------------------------------------------------------------------



# ------------------------------------------------------------------
# Construct list of files in given ensemble, for parse_qhmc.py
rm -f list.txt
for i in $inpath/Out/out.* ; do
  echo ${i##*.} >> temp    # Strip everything up to and including the last "."
done
sort temp -n | uniq > list.txt
rm -f temp

# Use list of files in given ensemble to extract time series data
rm -f $outpath/data/*.csv $outpath/ERRORS
echo "python ~schaich/scripts/parse_qhmc.py"
python ~schaich/scripts/parse_qhmc.py
chmod 644 $outpath/data/*.csv
rm -f list.txt            # Done with this

# Replace Web page to update timestamp
date=`date`
rm -f $outpath/index.html
echo writeLSD $dir "$date"
~schaich/scripts/writeLSD $dir "$date"
chmod 644 $outpath/index.html

# I like to monitor this (looks better without $outpath)
#grep Apparent ERRORS
wc -l M*
wc -l E*
echo
# ------------------------------------------------------------------
